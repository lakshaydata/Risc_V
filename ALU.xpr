`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 27.12.2024 09:36:26
// Design Name: 
// Module Name: ALU
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module ALU(
input clk, 
input reset, 
input [5:0] alu_ctrl,
input [31:0] src1,src2,
input [31:0] imm_value,
input [4:0] shamt,
output [31:0] result
    );
    
    always@(*)
          begin
              case(alu_ctrl)                                  
              6'b000001:begin
                            result <= src1+src2;   // ADD
                        end
              6'b000010 : begin
                              result = src1 - src2;  // SUB
                           end
              6'b000011 :begin
                             result = src1 << src2;  // SLL  Shift left logical
                           end
              6'b000100 : begin
                              result = ($signed(src1) < $signed(src2)) ? 1 : 0;   // SLT   set less than signed
                            end              
    
              6'b000101 :begin
                            result = ($unsigned(src1) < $unsigned(src2)) ? 1 : 0; // SLTU   set less than unsigned
                         end
                        
                        
                 6'b000110 :begin
                                result = src1 ^ src2; // XOR
                            end
                        
                  6'b000111 :begin
                                result = src1 >> src2; // SRL(Shift Right Logical)
                             end
                   
                   6'b001000 :begin
                                result = src1 >>> src2; // SRA(Shift Right Arithmetic)
                              end
                         
                    6'b001001 : //or operation
                        begin
                                result = src1 | src2; // OR
                        end
                        
                    6'b001010 : // and operation
                            
                         begin
                                result = src1 & src2 ; //AND
                          end
                          
              
            

                     6'b001011 :
                                result = src1 + imm_value; // ADDI

                     6'b001100 :
               
                                result = ($signed(src1) < $signed(imm_value)) ? 1 : 0 ; //SLTI

                     6'b001101 :
                                result = ( ($unsigned(src1)) < ($unsigned(imm_value)) ) ? 1 : 0;// SLTIU
                                        
                     6'b001110:
                                result = (src1 ^ imm_value); // XORI
              
                     6'b001111 :
               
                               result = src1 | imm_val_r; // ORI
               
              
                    6'b010000 :              
                               result = (src1 & imm_value); // ANDI
              
                    6'b010001 :
          
                              result = src1 << imm_value; // SLLI 
                              // Warnning: Iski imm_value shamt hogi, joki sirf 5 bit ka hai

              
                    6'b010010 :             //SRLI or SRAI  
               
                               begin
                                if(imm_value & 32'h00000400)
                                   begin
                                     result = src1 >>> imm_value;  //SRAI  Shift right arithmetic immediate
                                     // Warnning: Iski imm_value shamt hogi, joki sirf 4 bit ka hai
                                   end
                                else
                                   begin
                                      result = src1 >> imm_value; //SRLI   Shift left arithmetic immediate
                                      // Warnning: Iski imm_value shamt hogi, joki sirf 4 bit ka hai
                                   end
                               
                               end
            
                    6'b010011 :
                                begin
                                  //shayad koi kaam na aye yeh               //LB
                                end
                    6'b010100 :
                                begin
                                         //shayad koi kaam na aye yeh         //LH
                                end
                    6'b010101 :
                                begin
                          //shayad koi kaam na aye yeh                        //LW
                                end
                    6'b010110 :
                                begin
                            //shayad koi kaam na aye yeh                      //LBU
                                end  
                    6'b010111 :
                                begin
                             //shayad koi kaam na aye yeh                     //LHU
                                end
                    6'b011000 :
                                begin
                               //shayad koi kaam na aye yeh                   //SB
                                end
                    6'b011001 :
                                begin
                               //shayad koi kaam na aye yeh                   //SH
                                end
                    6'b011010 :
                                begin
                                //shayad koi kaam na aye yeh                  //SW
                                end   
                    6'b011011 :
                                begin
                                   result  =  (src1 == src2) ? 1 : 0;               //BEQ
                                end
                    6'b011100 :
                                begin
                                 result = (src1 != src2) ? 1 : 0;                //BNEQ
                                end
                    6'b011101 :
                                begin
                                   result = ($signed(src1) < $signed(src2))? 1 : 0;              //BLT  signed
                                end
                    6'b011110 :
                                begin
                                  result = ($signed(src1) >= $signed(src2))? 1 : 0;                //BGE signed
                                end  
                    6'b011111 :
                                begin
                                  result = ($unsigned(src1) <= $unsigned(src2))? 1 : 0;                 //BLTU unsigned
                                end
                    6'b100000 :
                                begin
                                   result = ($unsigned(src1) >= $unsigned(src2))? 1 : 0;                //BGEU unsigned
                                end
                    6'b100001 :
                                begin
                                  //shayad koi kaam na aye yeh               //LUI
                                end
                    6'b100010 :
                                begin
                                  //shayad koi kaam na aye yeh               //AUIPC
                                  // jara dhyaan dena
                                end    
                    6'b100011 :
                                begin
                                    //shayad koi kaam na aye yeh             //JAL
                                end
                    6'b100100 :
                                begin
                                   //shayad koi kaam na aye yeh              //JALR
                                end
                                
                                                                       
                
endmodule
