module top_riscv(
input clk,
input reset,
input mode, // high when giving the input and low when execution is happening
input instruction // this instruction will be stored in instruction memory
    );
    wire [31:0] imm_val_top;        //extracted immediate value (sign extended)
    wire [31:0] pc;                 //programme counter
    wire [31:0] instruction_out;    //output of instruction memory
    wire  [5:0] alu_control;        // control signal for determining the type of the alu operation
    wire  mem_to_reg;               // control signal for enabling memory to register file operation           
    wire  bneq_control;             // control signal for enabling bneq instruction                  
    wire  beq_control;              // control signal for branch equal to instruction     
    wire  jump;                     // control signal for enabling jump instruction
    wire [31:0] read_data_addr_dm;  // address for reading the data from data memory
    wire [31:0] imm_val;            // extracted immediate value from the instruction (sign extended)
    wire lb;                        // signal for enabling load operation
    wire sw;                        // signal for enabling store opeation
    wire [31:0] imm_val_branch_top; // extracted immediate value for branch instruction (sign extended)
    wire beq,bneq;                  // control signals for performiing branch equal to and not equal to operations
    wire bgeq_control;              // control signals for enabling branch greater than or equal to instruction
    wire blt_control;               // control signal for enabling branch less than instruction
    wire bge;                       // control signal for enabling branch greater than instruciton       
    wire blt;                       // control signal for enabling branch less than instruction
    wire lui_control;               // control signal for enabling load upper immediate operation
    wire [31:0] imm_val_lui;        // extracted immediate value for load upper immediate instruction (sign extended)
    wire [31:0] imm_val_jump;       // extracted immediate value for jump instruction (sign extended)
    wire [31:0] current_pc;         // register for storing return programme counter
	wire [31:0]immediate_value_store_temp;
	wire [31:0]immediate_value_store;
	wire [4:0] base_addr;   
	wire [9:0] enable;
	//enable[0]    instruction memory
	//enable[1]    instruction fetch unit
	//enable[2]    control unit
	//enable[3]    alu
	//enable[4]    data memory
    //enable[5]    register file
    //enable[6]    data path unit
	
	//////////////////////////////Instruction Memory//////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////
	
	// will store the instructions sequentially and later on will execute when mode = 0
	Instruction_Memory IM(
	clk,
	reset,
	pc,
	instruction,
	mode,
	instruction_out
	);
	
	
	/////////////////////////////////Instruction Fetch UNIT///////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////////////////
	// This unit will fetch the instructions which are stored in the instruction memory unit by providing the programme counter to instruction memory

	Instruction_fetch_unit IFU(
	clk,
    reset,
    imm_val_branch_top,
    imm_val_jump,
    beq,
    bneq,
    bge,
    blt,
    bltu,
    bgeu,
    jump,
    pc,
    current_pc);
	
/////////////////////////////////Control UNIT///////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////	
// Control unit 
    control_unit cu(
    clk,
    reset,
    instruction_out[6:0],
    instruction_out[14:12],
    instruction_out[31:25],
    alu_control,
    lb,
    mem_to_reg,
    bneq_ctrl,
    beq_ctrl,
    bge_ctrl,
    blt_ctrl,
    bltu_ctrl,
    bgeq_ctrl,
    jump,
    lui_ctrl,
    sw
    );

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                        // Data path unit //
                                                        
    // This unit is used to route the data between different modules in the design
                                                        
   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                    
        data_path dpu(clk,reset,
                  instruction_out[19:15],  //RS1
                  instruction_out[24 : 20],  // RS2
                  instruction_out[11 : 7],    //RD
                  alu_control,
                  jump,
                  beq_control,
                 
                  reg_dst,
                  mem_to_reg,
                  bneq_control,
                  immediate_value_store,
                  instruction_out[24:20], // SHAMT
                  lb,
                  sw,
                  bgeq_control,
                  blt_control,
                  lui_control,
                  imm_val_lui,
                  imm_val_jump,
                  current_pc, // return address
                  read_data_addr_dm,
                  beq,
                  bneq,
                  bge,
                  blt
                  
                  );

	
endmodule
