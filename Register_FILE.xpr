`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 28.12.2024 12:54:50
// Design Name: 
// Module Name: Register_FILE
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module Register_FILE(
 input clk,
 input reset,
 input [4:0] rs1_addr,
 input [4:0] rs2_addr,
 input [4:0] write_addr,
 input [31:0] write_data,
 input lui_ctrl,
 input lb,
 input [31:0] lui_imm_value,
 input [31:0] return_address,
 input jump_ctrl,
 input sw,
 output  [31:0] rs1_data,
 output  [31:0] rs2_data,
 output  [31:0] read_data_addr_dm,
 output reg [31:0] data_out_to_dm
    );
    
    reg [31:0] reg_file [31:0];
    wire [31:0] write_reg_dm;  // address for laod type immediate
    
    assign read_data_addr_dm = write_addr;
    assign write_reg_dm = write_data; 
    
    integer i;
    
    always@(posedge clk)
      begin
         if(reset)
            begin
                for(i = 0; i< 32; i=i+1)
                  begin
                      reg_file[i] = 32'h00000000;
                      
                  end 
                  data_out_to_dm = 32'h00000000;   
            end
          else
             begin
                 if(lb)
                    begin
                       reg_file[write_addr] = write_data;
                    end
                 else if(sw)
                    begin
                       data_out_to_dm = reg_file[rs1_addr];
                    end
                 else if(lui_ctrl)
                    begin
                       reg_file[write_addr] = lui_imm_value;
                    end
                  else if(jump_ctrl)
                    begin
                       reg_file[write_addr] = return_address;
                    end
             end
      end
    
    
    assign rs1_data = reg_file[rs1_addr];
    assign rs2_data = reg_file[rs2_addr];
    
    
    
    
    
    
    
    
    
    
    
    
endmodule
