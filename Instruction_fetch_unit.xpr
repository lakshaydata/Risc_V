`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Lakshay Data
// 
// Create Date: 23.12.2024 15:15:07
// Design Name: 
// Module Name: Instruction_fetch_unit
// Project Name: Instruction_Fetch_Unit
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module Instruction_fetch_unit(
input clk, 
input reset,
input [11:0] imm_addr_branch,
input [11:0] imm_addr_jump, 
input BEQ, 
input BNEQ, 
input BGE, 
input BLT,
input BLTU,
input BGEU,
input JUMP, 
output [11:0] PC, 
output [11:0] Current_PC);
  
  reg [11:0] output_PC;
  reg [11:0] output_current_PC;

  always@(posedge clk)
    begin
      if(reset)
        begin
          output_PC <= 12'b000000000000;  //resetting PC to bottom most point in case of reset
          output_current_PC <= 12'b000000000000;
        end
      else
        begin
          if(BEQ || BNEQ || BGE || BLT || BLTU || BGEU)
            begin
              output_PC <= PC + imm_addr_branch;
            end
          else if(JUMP)
            begin
              output_PC <= PC + imm_addr_jump;
              output_current_PC <= PC;  // this is current PC value that has to be stored in rd while executing the instruction. Remember that while coming back you have to increase the PC by 4.
            end
          else
            begin
              output_PC <= PC + 4; // depending upon setting of Instruction Memory
            end
        end
    end
  
  assign PC = output_PC;
  assign Current_PC = output_current_PC;
  
endmodule
